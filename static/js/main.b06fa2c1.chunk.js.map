{"version":3,"sources":["components/Counter/Counter.module.css","components/Button/Button.module.css","redux/counter-reducer.ts","components/Button/Button.tsx","components/ValueEditor/ValueEditor.tsx","components/CounterDisplay/CounterDisplay.tsx","components/Counter/Counter.tsx","VariantOne.tsx","VariantTwo.tsx","App.tsx","reportWebVitals.ts","redux/store.ts","index.tsx","components/ValueEditor/ValueEditor.module.css"],"names":["module","exports","ACTIONS_TYPES","Button","React","memo","props","disabled","onClick","children","className","styles","button","initialState","currentValue","maxValue","startValue","error","setCurrentValue","type","SET_CURRENT_VALUE","payload","setStartValue","SET_START_VALUE","setMaxValue","SET_MAX_VALUE","setError","SET_ERROR","ValueEditor","editMode","setEditMode","dispatch","useDispatch","onClickHandler","useCallback","inputContainer","input","errorInput","value","onChange","event","currentTarget","buttonContainer","CounterDisplay","limitReached","CounterStyle","color","fontWeight","fontSize","displayedContent","style","Counter","variant","onIncrementHandler","onResetHandler","displayContainer","VariantOne","VariantTwo","App","useSelector","state","counter","useState","useEffect","startValueWithLocalStorage","localStorage","getItem","maxValueWithLocalStorage","Number","setItem","toString","INCREMENT_COUNTER","RESET_COUNTER","exact","to","path","render","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","rootReducer","combineReducers","action","store","createStore","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.b06fa2c1.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"displayContainer\":\"Counter_displayContainer__24-Sf\",\"buttonContainer\":\"Counter_buttonContainer__2rz82\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"button\":\"Button_button__3-QGf\"};","export enum ACTIONS_TYPES {\r\n    SET_CURRENT_VALUE = 'Counter/Counter/SET_CURRENT_VALUE',\r\n    SET_START_VALUE = 'Counter/Counter/SET_START_VALUE',\r\n    SET_MAX_VALUE = 'Counter/Counter/SET_MAX_VALUE',\r\n    SET_ERROR = 'Counter/Counter/SET_ERROR',\r\n    INCREMENT_COUNTER = 'Counter/Counter/INCREMENT_COUNTER',\r\n    RESET_COUNTER = 'Counter/Counter/RESET_COUNTER',\r\n}\r\n\r\nexport type ActionType = ReturnType<typeof setCurrentValue>\r\n    | ReturnType<typeof incrementCounter>\r\n    | ReturnType<typeof resetCounter>\r\n    | ReturnType<typeof setStartValue>\r\n    | ReturnType<typeof setMaxValue>\r\n    | ReturnType<typeof setError>\r\n\r\nexport type CounterStateType = typeof initialState;\r\n\r\nconst initialState = {\r\n    currentValue: 0,\r\n    maxValue: 5,\r\n    startValue: 0,\r\n    error: false,\r\n}\r\n\r\nexport const counterReducer = (state: CounterStateType = initialState, action: ActionType): CounterStateType => {\r\n    switch (action.type) {\r\n        case ACTIONS_TYPES.SET_START_VALUE:\r\n        case ACTIONS_TYPES.SET_MAX_VALUE:\r\n        case ACTIONS_TYPES.SET_ERROR:\r\n        case ACTIONS_TYPES.SET_CURRENT_VALUE: {\r\n            return {\r\n                ...state,\r\n                ...action.payload\r\n            }\r\n        }\r\n        case ACTIONS_TYPES.INCREMENT_COUNTER: {\r\n            return {\r\n                ...state,\r\n                currentValue: state.currentValue + 1,\r\n            }\r\n        }\r\n        case ACTIONS_TYPES.RESET_COUNTER: {\r\n            return {\r\n                ...state,\r\n                currentValue: state.startValue,\r\n            }\r\n        }\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\n\r\nexport const setCurrentValue = (currentValue: number) => ({\r\n    type: ACTIONS_TYPES.SET_CURRENT_VALUE,\r\n    payload: {\r\n        currentValue,\r\n    },\r\n});\r\nexport const setStartValue = (startValue: number) => ({\r\n    type: ACTIONS_TYPES.SET_START_VALUE,\r\n    payload: {\r\n        startValue,\r\n    },\r\n});\r\n\r\nexport const setMaxValue = (maxValue: number) => ({\r\n    type: ACTIONS_TYPES.SET_MAX_VALUE,\r\n    payload: {\r\n        maxValue,\r\n    },\r\n});\r\n\r\nexport const setError = (error: boolean) => ({\r\n    type: ACTIONS_TYPES.SET_ERROR,\r\n    payload: {\r\n        error,\r\n    },\r\n});\r\n\r\nexport const incrementCounter = () => ({\r\n    type: ACTIONS_TYPES.INCREMENT_COUNTER,\r\n    payload: {},\r\n});\r\n\r\nexport const resetCounter = () => ({\r\n    type: ACTIONS_TYPES.RESET_COUNTER,\r\n    payload: {},\r\n});","import React, {FC} from 'react';\r\nimport styles from './Button.module.css';\r\n\r\ntype PropsType = {\r\n    disabled?: boolean,\r\n    onClick: () => void,\r\n}\r\n\r\nexport const Button: FC<PropsType> = React.memo((props) => {\r\n    const {disabled, onClick, children} = props;\r\n\r\n    return (\r\n        <button className={styles.button} onClick={onClick} disabled={disabled}>{children}</button>\r\n    )\r\n})","import React, {ChangeEvent, FC, useCallback} from 'react';\r\nimport {Button} from '../Button/Button';\r\nimport styles from './ValueEditor.module.css'\r\nimport {useDispatch} from 'react-redux';\r\nimport {setCurrentValue, setError, setMaxValue, setStartValue} from '../../redux/counter-reducer';\r\n\r\ntype PropsType = {\r\n    startValue: number,\r\n    maxValue: number,\r\n    editMode: boolean,\r\n    error: boolean,\r\n    setEditMode: (value: boolean) => void,\r\n};\r\n\r\nexport const ValueEditor: FC<PropsType> = (props) => {\r\n    const {\r\n        error,\r\n        editMode,\r\n        startValue,\r\n        maxValue,\r\n        setEditMode,\r\n    } = props;\r\n\r\n    const dispatch = useDispatch();\r\n\r\n    const onChangeStartValue = (event: ChangeEvent<HTMLInputElement>) => {\r\n        const value = +event.currentTarget.value;\r\n        if (value >= maxValue || value < 0) return dispatch(setError(true));\r\n        error && dispatch(setError(false));\r\n        setEditMode(true);\r\n        dispatch(setStartValue(value));\r\n    };\r\n    const onChangeMaxValue = (event: ChangeEvent<HTMLInputElement>) => {\r\n        const value = +event.currentTarget.value;\r\n        if (value <= startValue) return dispatch(setError(true));\r\n        error && dispatch(setError(false));\r\n        setEditMode(true);\r\n        dispatch(setMaxValue(value));\r\n    };\r\n    const onClickHandler = useCallback(() => {\r\n        dispatch(setCurrentValue(startValue));\r\n        setEditMode(false);\r\n    }, [dispatch, startValue, setEditMode]);\r\n\r\n\r\n    return (<div>\r\n        <div className={styles.inputContainer}>\r\n            <div>Start value:\r\n                <input type=\"number\"\r\n                       className={`${styles.input} ${error ? styles.errorInput : ''}`}\r\n                       value={startValue}\r\n                       onChange={onChangeStartValue}/>\r\n            </div>\r\n            <div>Max value: <input type=\"number\"\r\n                                   className={`${styles.input} ${error ? styles.errorInput : ''}`}\r\n                                   value={maxValue}\r\n                                   onChange={onChangeMaxValue}/>\r\n            </div>\r\n        </div>\r\n        <div className={styles.buttonContainer}>\r\n            <Button onClick={onClickHandler} disabled={!editMode || error}>set</Button>\r\n        </div>\r\n    </div>)\r\n};","import React, {FC} from 'react';\r\n\r\ntype PropsType = {\r\n    currentValue: number,\r\n    limitReached: boolean,\r\n    editMode: boolean,\r\n    error: boolean,\r\n};\r\n\r\nexport const CounterDisplay: FC<PropsType> = (props) => {\r\n    const {currentValue, limitReached, editMode, error} = props;\r\n\r\n    const CounterStyle = {\r\n        color: limitReached || error ? 'red' : '#282c34',\r\n        fontWeight: 700,\r\n        fontSize: limitReached ? '3.5rem' : '3rem',\r\n    }\r\n    const displayedContent = error ? 'Invalid value' : editMode ? 'Set value' : currentValue;\r\n\r\n    return (\r\n        <div style={CounterStyle}>{displayedContent}</div>\r\n    )\r\n};","import React, {FC} from 'react';\r\nimport {Button} from '../Button/Button';\r\nimport styles from './Counter.module.css'\r\nimport {CounterDisplay} from '../CounterDisplay/CounterDisplay';\r\nimport {CounterVariantType} from '../../App';\r\n\r\ntype PropsType = {\r\n    currentValue: number,\r\n    editMode: boolean,\r\n    error: boolean,\r\n    limitReached: boolean,\r\n    startValue: number,\r\n    variant: CounterVariantType,\r\n    onIncrementHandler: () => void,\r\n    onResetHandler: () => void,\r\n    setEditMode: (value: boolean) => void,\r\n};\r\n\r\nexport const Counter: FC<PropsType> = (props) => {\r\n    const {\r\n        variant, currentValue, error, limitReached,\r\n        editMode, startValue, onIncrementHandler, onResetHandler, setEditMode\r\n    } = props;\r\n\r\n    return (<div>\r\n        <div className={styles.displayContainer}>\r\n            <CounterDisplay currentValue={currentValue}\r\n                            editMode={editMode}\r\n                            limitReached={limitReached}\r\n                            error={error}/>\r\n        </div>\r\n        <div className={styles.buttonContainer}>\r\n            <Button disabled={limitReached || editMode}\r\n                    onClick={onIncrementHandler}>inc</Button>\r\n            <Button disabled={currentValue === startValue || editMode}\r\n                    onClick={onResetHandler}>reset</Button>\r\n            {variant === 'TWO' && <Button onClick={() => setEditMode(true)}>set</Button>}\r\n        </div>\r\n    </div>)\r\n};","import React, {FC} from 'react';\r\nimport {ValueEditor} from './components/ValueEditor/ValueEditor';\r\nimport {Counter} from './components/Counter/Counter';\r\nimport './App.css';\r\n\r\ntype PropsType = {\r\n    startValue: number,\r\n    currentValue: number,\r\n    error: boolean,\r\n    editMode: boolean,\r\n    maxValue: number,\r\n    limitReached: boolean,\r\n    setEditMode: (value: boolean) => void,\r\n    onIncrementHandler: () => void,\r\n    onResetHandler: () => void,\r\n};\r\n\r\nexport const VariantOne: FC<PropsType> = (props) => {\r\n    const {\r\n        startValue,\r\n        currentValue,\r\n        editMode,\r\n        error,\r\n        limitReached,\r\n        onResetHandler,\r\n        onIncrementHandler,\r\n        setEditMode,\r\n        maxValue,\r\n    } = props;\r\n\r\n    const VARIANT = 'ONE';\r\n\r\n    return (<div className=\"wrapper-counter\">\r\n        <div className=\"wrapper-block\">\r\n            <ValueEditor startValue={startValue}\r\n                         error={error}\r\n                         editMode={editMode}\r\n                         setEditMode={setEditMode}\r\n                         maxValue={maxValue}\r\n            />\r\n        </div>\r\n\r\n        <div className=\"wrapper-block\">\r\n            <Counter currentValue={currentValue}\r\n                     editMode={editMode}\r\n                     error={error}\r\n                     limitReached={limitReached}\r\n                     startValue={startValue}\r\n                     onIncrementHandler={onIncrementHandler}\r\n                     onResetHandler={onResetHandler}\r\n                     variant={VARIANT}\r\n                     setEditMode={setEditMode}\r\n            />\r\n        </div>\r\n    </div>)\r\n};","import React, {FC} from 'react';\r\nimport {ValueEditor} from './components/ValueEditor/ValueEditor';\r\nimport {Counter} from './components/Counter/Counter';\r\nimport './App.css';\r\n\r\ntype PropsType = {\r\n    startValue: number,\r\n    currentValue: number,\r\n    error: boolean,\r\n    editMode: boolean,\r\n    maxValue: number,\r\n    limitReached: boolean,\r\n    setEditMode: (value: boolean) => void,\r\n    onIncrementHandler: () => void,\r\n    onResetHandler: () => void,\r\n};\r\n\r\nexport const VariantTwo: FC<PropsType> = (props) => {\r\n    const {\r\n        startValue,\r\n        editMode,\r\n        error,\r\n        currentValue,\r\n        limitReached,\r\n        onResetHandler,\r\n        onIncrementHandler,\r\n        setEditMode,\r\n        maxValue,\r\n    } = props;\r\n\r\n    const VARIANT = 'TWO';\r\n\r\n    return (<div className=\"wrapper-counter\">\r\n        <div className=\"wrapper-block\">\r\n            {editMode ? <ValueEditor startValue={startValue}\r\n                                     error={error}\r\n                                     editMode={editMode}\r\n                                     maxValue={maxValue}\r\n                                     setEditMode={setEditMode}\r\n            /> : <Counter currentValue={currentValue}\r\n                          editMode={editMode}\r\n                          error={error}\r\n                          limitReached={limitReached}\r\n                          startValue={startValue}\r\n                          onIncrementHandler={onIncrementHandler}\r\n                          onResetHandler={onResetHandler}\r\n                          variant={VARIANT}\r\n                          setEditMode={setEditMode}\r\n            />}\r\n        </div>\r\n    </div>)\r\n};","import React, {useCallback, useEffect, useState} from 'react';\nimport './App.css';\nimport {HashRouter, NavLink, Route} from 'react-router-dom';\nimport {VariantOne} from './VariantOne';\nimport {VariantTwo} from './VariantTwo';\nimport {useDispatch, useSelector} from 'react-redux';\nimport {AppStateType} from './redux/store';\nimport {incrementCounter, resetCounter, setCurrentValue, setMaxValue, setStartValue} from './redux/counter-reducer';\n\nexport type CounterVariantType = 'ONE' | 'TWO';\n\nfunction App() {\n    const currentValue = useSelector<AppStateType, number>(state => state.counter.currentValue);\n    const maxValue = useSelector<AppStateType, number>(state => state.counter.maxValue);\n    const startValue = useSelector<AppStateType, number>(state => state.counter.startValue);\n    const error = useSelector<AppStateType, boolean>(state => state.counter.error);\n\n    const limitReached = currentValue === maxValue;\n\n    const [editMode, setEditMode] = useState<boolean>(false);\n\n    const dispatch = useDispatch();\n\n    useEffect(() => {\n        const startValueWithLocalStorage = localStorage.getItem('startValue');\n        const maxValueWithLocalStorage = localStorage.getItem('maxValue');\n        if (startValueWithLocalStorage && maxValueWithLocalStorage) {\n            dispatch(setCurrentValue(Number(startValueWithLocalStorage)));\n            dispatch(setStartValue(Number(startValueWithLocalStorage)));\n            dispatch(setMaxValue(Number(maxValueWithLocalStorage)));\n        }\n    }, [dispatch])\n\n    useEffect(() => {\n        localStorage.setItem('startValue', startValue.toString());\n        localStorage.setItem('maxValue', maxValue.toString());\n    }, [maxValue, startValue])\n\n    const onIncrementHandler = useCallback(() => {\n        dispatch(incrementCounter());\n    }, [dispatch]);\n    const onResetHandler = useCallback(() => {\n        dispatch(resetCounter());\n    }, [dispatch]);\n\n\n    return (\n        <HashRouter>\n            <div className=\"App\">\n                <div className={'menuNav'}>\n                    <NavLink exact to={'/'} className={`menuNav__link`}>Variant One</NavLink>\n                    <NavLink to={'/varianttwo'} className={`menuNav__link`}>Variant Two</NavLink>\n                </div>\n                <div className=\"App-header\">\n                    <Route exact path={'/'} render={() => <VariantOne\n                        editMode={editMode}\n                        error={error}\n                        maxValue={maxValue}\n                        setEditMode={setEditMode}\n                        startValue={startValue}\n                        onIncrementHandler={onIncrementHandler}\n                        onResetHandler={onResetHandler}\n                        limitReached={limitReached}\n                        currentValue={currentValue}\n                    />}/>\n\n                    <Route path={'/varianttwo'} render={() => <VariantTwo\n                        editMode={editMode}\n                        error={error}\n                        setEditMode={setEditMode}\n                        startValue={startValue}\n                        onIncrementHandler={onIncrementHandler}\n                        onResetHandler={onResetHandler}\n                        limitReached={limitReached}\n                        currentValue={currentValue}\n                        maxValue={maxValue}\n                    />}/>\n                </div>\n            </div>\n        </HashRouter>\n    );\n};\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import {combineReducers, createStore} from 'redux';\r\nimport {counterReducer} from './counter-reducer';\r\n\r\n\r\nconst rootReducer = combineReducers({\r\n    counter: counterReducer\r\n});\r\n\r\nexport type AppStateType = ReturnType<typeof rootReducer>;\r\n\r\nexport const store = createStore(rootReducer);","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport {Provider} from 'react-redux';\nimport {store} from './redux/store';\n\nReactDOM.render(\n    <Provider store={store}>\n        <App/>\n    </Provider>,\n    document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"inputContainer\":\"ValueEditor_inputContainer__JjO0q\",\"buttonContainer\":\"ValueEditor_buttonContainer__vKX2r\",\"input\":\"ValueEditor_input__20qGD\",\"errorInput\":\"ValueEditor_errorInput__Z6kq9\"};"],"sourceRoot":""}