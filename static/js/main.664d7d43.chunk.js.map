{"version":3,"sources":["components/ValueEditor/ValueEditor.module.css","components/Counter/Counter.module.css","components/Button/Button.module.css","components/Button/Button.tsx","components/ValueEditor/ValueEditor.tsx","components/CounterDisplay/CounterDisplay.tsx","components/Counter/Counter.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["module","exports","Button","React","memo","props","disabled","onClick","children","className","styles","button","ValueEditor","error","editMode","startValue","endCounter","setEditMode","setStartValue","setStartCounter","setEndCounter","setError","inputContainer","type","input","errorInput","value","onChange","event","currentTarget","buttonContainer","CounterDisplay","startCounter","limitReached","CounterStyle","color","fontWeight","fontSize","displayedContent","style","Counter","onIncrementHandler","onResetHandler","displayContainer","App","useState","useEffect","startValueLocal","localStorage","getItem","endCounterLocal","Number","setItem","toString","useCallback","prev","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.664d7d43.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"inputContainer\":\"ValueEditor_inputContainer__JjO0q\",\"buttonContainer\":\"ValueEditor_buttonContainer__vKX2r\",\"input\":\"ValueEditor_input__20qGD\",\"errorInput\":\"ValueEditor_errorInput__Z6kq9\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"displayContainer\":\"Counter_displayContainer__24-Sf\",\"buttonContainer\":\"Counter_buttonContainer__2rz82\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"button\":\"Button_button__3-QGf\"};","import React, {FC} from 'react';\r\nimport styles from './Button.module.css';\r\n\r\ntype PropsType = {\r\n    disabled: boolean\r\n    onClick: () => void\r\n}\r\n\r\nexport const Button: FC<PropsType> = React.memo((props) => {\r\n    const {disabled, onClick, children} = props;\r\n\r\n    return (\r\n        <button className={styles.button} onClick={onClick} disabled={disabled}>{children}</button>\r\n    )\r\n})","import React, {ChangeEvent, FC} from 'react';\r\nimport {Button} from '../Button/Button';\r\nimport styles from './ValueEditor.module.css'\r\n\r\ntype PropsType = {\r\n    startValue: number\r\n    endCounter: number\r\n    editMode: boolean\r\n    error: boolean\r\n    setEditMode: (value: boolean) => void\r\n    setStartValue: (value: number) => void\r\n    setStartCounter: (value: number) => void\r\n    setEndCounter: (value: number) => void\r\n    setError: (value: boolean) => void\r\n}\r\n\r\nexport const ValueEditor: FC<PropsType> = (props) => {\r\n    const {\r\n        error,\r\n        editMode,\r\n        startValue,\r\n        endCounter,\r\n        setEditMode,\r\n        setStartValue,\r\n        setStartCounter,\r\n        setEndCounter,\r\n        setError\r\n    } = props;\r\n\r\n    const onChangeStartValue = (event: ChangeEvent<HTMLInputElement>) => {\r\n        const value = +event.currentTarget.value;\r\n        if (value >= endCounter || value < 0) return setError(true);\r\n        error && setError(false);\r\n        setEditMode(true);\r\n        setStartValue(value);\r\n    };\r\n    const onChangeMaxValue = (event: ChangeEvent<HTMLInputElement>) => {\r\n        const value = +event.currentTarget.value;\r\n        if (value <= startValue) return setError(true);\r\n        error && setError(false);\r\n        setEditMode(true);\r\n        setEndCounter(value);\r\n    };\r\n    const onClickHandler = () => {\r\n        setStartCounter(startValue)\r\n        setEditMode(false)\r\n    }\r\n\r\n\r\n    return (<div>\r\n        <div className={styles.inputContainer}>\r\n            <div>Start value:\r\n                <input type=\"number\"\r\n                       className={`${styles.input} ${error ? styles.errorInput : ''}`}\r\n                       value={startValue}\r\n                       onChange={onChangeStartValue}/>\r\n            </div>\r\n            <div>Max value: <input type=\"number\"\r\n                                   className={`${styles.input} ${error ? styles.errorInput : ''}`}\r\n                                   value={endCounter}\r\n                                   onChange={onChangeMaxValue}/>\r\n            </div>\r\n        </div>\r\n        <div className={styles.buttonContainer}>\r\n            <Button onClick={onClickHandler} disabled={!editMode || error}>set</Button>\r\n        </div>\r\n    </div>)\r\n}","import React, {FC} from 'react';\r\n\r\ntype PropsType = {\r\n    startCounter: number\r\n    limitReached: boolean\r\n    editMode: boolean\r\n    error: boolean\r\n}\r\n\r\nexport const CounterDisplay: FC<PropsType> = (props) => {\r\n    const {startCounter, limitReached, editMode, error} = props;\r\n\r\n    const CounterStyle = {\r\n        color: limitReached || error ? 'red' : '#282c34',\r\n        fontWeight: 700,\r\n        fontSize: limitReached ? '3.5rem' : '3rem',\r\n    }\r\n    const displayedContent = error ? 'Invalid value' : editMode? 'Set value' : startCounter\r\n\r\n    return (\r\n        <div style={CounterStyle}>{displayedContent}</div>\r\n    )\r\n}","import React, {FC} from 'react';\r\nimport {Button} from '../Button/Button';\r\nimport styles from './Counter.module.css'\r\nimport {CounterDisplay} from '../CounterDisplay/CounterDisplay';\r\n\r\ntype PropsType = {\r\n    startCounter: number\r\n    editMode: boolean\r\n    error: boolean\r\n    limitReached: boolean\r\n    startValue: number\r\n    onIncrementHandler: () => void\r\n    onResetHandler: () => void\r\n}\r\n\r\nexport const Counter: FC<PropsType> = (props) => {\r\n    const {startCounter, error, limitReached, editMode, startValue, onIncrementHandler, onResetHandler} = props;\r\n\r\n    return (<div>\r\n        <div className={styles.displayContainer}>\r\n            <CounterDisplay startCounter={startCounter}\r\n                            editMode={editMode}\r\n                            limitReached={limitReached}\r\n                            error={error}/>\r\n        </div>\r\n        <div className={styles.buttonContainer}>\r\n            <Button disabled={limitReached || editMode}\r\n                    onClick={onIncrementHandler}>inc</Button>\r\n            <Button disabled={startCounter === startValue || editMode}\r\n                    onClick={onResetHandler}>reset</Button>\r\n        </div>\r\n    </div>)\r\n}","import React, {useCallback, useEffect, useState} from 'react';\nimport './App.css';\nimport {Button} from './components/Button/Button';\nimport {CounterDisplay} from './components/CounterDisplay/CounterDisplay';\nimport {ValueEditor} from './components/ValueEditor/ValueEditor';\nimport {Counter} from './components/Counter/Counter';\n\nfunction App() {\n    const [startCounter, setStartCounter] = useState<number>(0);\n    const [endCounter, setEndCounter] = useState<number>(5);\n    const [startValue, setStartValue] = useState<number>(startCounter);\n\n    const [editMode, setEditMode] = useState<boolean>(false);\n    const [error, setError] = useState<boolean>(false);\n\n    const limitReached = startCounter === endCounter;\n\n    useEffect(() => {\n        const startValueLocal = localStorage.getItem('startValue');\n        const endCounterLocal = localStorage.getItem('endCounter');\n        if (startValueLocal && endCounterLocal) {\n            setStartCounter(Number(startValueLocal));\n            setStartValue(Number(startValueLocal));\n            setEndCounter(Number(endCounterLocal));\n        }\n    }, [])\n    useEffect(() => {\n        localStorage.setItem('startValue', startValue.toString());\n        localStorage.setItem('endCounter', endCounter.toString());\n    }, [endCounter, startValue])\n\n    const onIncrementHandler = useCallback(() => {\n        setStartCounter((prev) => prev + 1)\n    }, []);\n    const onResetHandler = useCallback(() => {\n        setStartCounter(startValue);\n    }, [startValue]);\n\n\n    return (\n        <div className=\"App\">\n            <div className=\"App-header\">\n                <div className=\"wrapper-block\">\n                    <ValueEditor startValue={startValue}\n                                 error={error}\n                                 setStartValue={setStartValue}\n                                 editMode={editMode}\n                                 endCounter={endCounter}\n                                 setStartCounter={setStartCounter}\n                                 setEditMode={setEditMode}\n                                 setEndCounter={setEndCounter}\n                                 setError={setError}\n                    />\n                </div>\n\n                <div className=\"wrapper-block\">\n                    <Counter startCounter={startCounter}\n                             editMode={editMode}\n                             error={error}\n                             limitReached={limitReached}\n                             startValue={startValue}\n                             onIncrementHandler={onIncrementHandler}\n                             onResetHandler={onResetHandler}\n                    />\n                </div>\n\n            </div>\n        </div>\n    );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}